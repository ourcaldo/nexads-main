You're a programmer and data analytics expert. I need your help to build an automation app called "nexAds" for educational purposes based on Python languange. The keypoints of the app, the app is have function to push traffic to the website that display Adsense ads. The app will use some module which is:
1. Python as a main languange
2. Playwright async Stealth
3. Browserforge to inject an random fingerprint
4. Statistical Delay Generator to make random delay for each action and each steps
5. Use Multiprocessing (not threading) as the thread worker to run more then 1 workers at the time.

We can run the app only from terminal using prompt "python name-file.py." But, on the other side, we also have prompt to see or make editing to the config file with prompt "python name-file.py --config," after we prompt that, the GUI will show up so we can see and edit each settings.

Please keep in mind, that:
1. Each activity and steps, we need to use random delay based on min and max time that user set.
2. We need to ensure that we're in correct tab by lookin of the domain in URL list. If we're not in correct tab, then look in all tab, if we found the correct URL then refocus it. If we can't found the tab and at the same time there's no more than 1 tab opened, open the correct tab in the current tab, but if there's more than 1 tab opened, open the correct tab in new tab (I'll provide the reference later).
3. For click activity (included for random click activity), the app must be do real click (by click on the elements), not a js click. So, don't add the fallback click.
4. Social referer isn't hardcoded in the main code, but make the json and we'll use it in the main code.
5. Make sure that the automation is can't be detected as a bot.
6. The output is 3 which is the refferer (json), main code and the ui code. But, I still want to open the GUI config is still --config, not mention different file name.

First, you need to deeply understand the instruction and details that I gave, after you fully understand (if not, it's okay to ask me) give the full code of each file. For file code, please add a bit phpDoc in each of the function in each files. Althought I ask for more structued code files, I want no more than 2 files code, so just files code for the UI and main code files only. But, also please keep in mind, that to run the app, I only want by single prompt python name-file.py to run or use the argument --config to open the GUI of Settings. Not by different prompt.

Now, let's talk about the GUI layout, for the layout let's make in 3 tabs, which is General Settings, URL List, and Ads Settings. For each tabs, let's make the layout in 2 or 3 column, so the app not too down-vertical.

For General Settings, we have:
1. Proxy Configuration, which user can set the type of proxy from HTTP, HTTPS, Socks5, Socks4. After that, user can input the proxy credentials with these format IP:Port, IP:Port@Username:Password, Username:Password@IP:Port. User also can choose the proxy credentials from a txt file by clicking a button, then file manager will be opened and user can choose the file. At the time, user only can fill the credentials with the format or using the txt file like "proxy-list.txt". If, proxy credentials is empty, then we'll not use the proxy. Make sure that we only save one data at the time, if user fill the credentials by the proxy then in the config json must be filled in the credentials. If user choose a file, then in the config is filled in the file, while in the credentials must be empty. If, in file proxy user put more than a threads that user set (proxy > threads), i want the app to random choose the proxy, can't be same, 1 proxy can't used by 1 threads.
2. In same tab, we also have Browser Configuration which user can turn on or turn off the settings of:
a. Headless mode if turn off, then the settings in Camoufox will be "headless="False"." If the settings is turn on by user, then it'll have 2 option which is Headless Mode and Virutal Mode, based on that each mode, the headless settings will be "headless="virtual"" for firtual and headless="True"" for Headless Mode.
b. Disable uBlock Add On, if it's turn on that in Camoufox settings will be like this "exclude_addons=[DefaultAddons.UBO]," but if it's turn off, we can passing the settings argument
c. Enable Random Activity Settings, if we turn on this settings, there's will be new option that appear bottom of the settings, while user can choose the random activity from Random Scroll, Random Hover, Random Click, and Mix Random Activity. If Mix Random Activity is turn on, will be also turn on all other activity. If the Random Activity Settings is activity, in each page that we visited we'll do random activity same as stay time.
d. Auto Accept Google Cookies, if these settings is turn on by user. The app we'll check does the elements of Google Cookies is appear or not. If appear, we'll click Accept or Continue in the page. I'll give you the code and elements later.
e. Last, in the browser settings also have settings for user to choose the browser, from Chrome, Firefox, Safari, Edge.
3. On the other column, we have random delay time that user can set by Min. Time and Max. Time. For each steps and activity, the app will be generate a random delay time based on this settings.
4. Session Settings. In this settings, if user turn on this settings, then user need to specify the session that app will run. After session is reached, then the app will be stop from running it. But if not, the app is always running and always create new session over and over.
5. Then we have Threads Settings, user can specify the threads worker that we'll use at one time. For example, if user set the threads to 30, then we'll run the app with 30 threads simultaneously.
6. We also have OS Fingerprint settings, which user can choose from Windows, MacOs, Linux, and Ios, Android. User can choose multiple OS. Keep in mind, then os and device must be match, which is if the user choose desktop device, then the only OS that can use is Windows, MacOs, Ios and Andorid. If device type is Mobile, then the OS is Android or Ios. So, please make the logic if user choose all of it's to use correct device type and the os.
7. Device type, which is user can choose multiple (which is will be random it), the option is Desktop or Mobile. 
8. We have max session settings, user can specify the max time (in minutes) of each session worker is running. If max session is reached, then the app must be stop the process ASAP, close the browser and shutdown the worker, so the worker can make new session after random delay. 

Next, for the URL List tabs, we have settings like this:
1. First, we have URL Refferer which user can choose from Direct, Social, Organic and Random. The refferer is applied only for 1st URL when the app is visited that URL. If user choose direct, then we didn't use any refferer. If user choose the Social then we choose it from json file from this refferer list (please also make this json file as part of the config), and if user choose organic, user need to put the list of keyword with new line seperated. When organic is choosen by user, we also need to visiting google.com then typing the keyword and search of it, after that we'll need to lookin the search result page and choose the same domain as 1st URL that user input and click that. For the Random, it'll automaticly choose all and randomly choose the refferer using Markov Chain for each session.
List of refferer Social:
a. Facebook: facebook.com, fb.me, m.facebook.com, l.facebook.com.
b. Instagram: instagram.com, l.instagram.com
c. Linkedin: linkedin.com, lnkd.in, linkedin.android
d. Snapchat: snapchat.com
e. Telegram: web.telegram.org, org.telegram.messenger
f. Threads: threads.net, l.threads.net
g. Tiktok: tiktok.com
h. Twitter: Twitter.com, t.co, x.com
2. After that, user need to put the URL in URL List, user need type the URL then click Add URL button or enter to add the data. On each URL list, there's also Min. Time and Max Time settings for user to set random stay time on that page. In each url list, there's also option to checklist the Random Page, if user choose this, then user need to put/edit the URL for that list use more than 1 link with comma seperator, that for each run, app will be choose randomly from that list. For example like this:
URL | Random Page | Min Time | Max Time
https://camarjaya.co.id | x | 30 | 60 -> unchecklist random page, then app will choose that specific url.
https://camarjaya.co.id, https://camarjaya.co.id/blog, .... | v | 30 | 60 -> random pages is on, then app will random choose a link from that list to be visited.
After each data url is added, please add numbering in very left of the table that automatic generated. User also can delete the URL list by click the table data and click delete url or press the DEL or backspace.

On last tabs, there's Ads Settings, in this tab the settings is:
1. CTR of Ads. The CTR of Ads setting allows the user to define the percentage of ad clicks based on the number of ad impressions during user sessions. To simulate this accurately, the system calculates the total number of possible sessions in the next hour using two parameters: the number of threads (workers) and the maximum session time. For example, if the system is configured with 30 threads and a maximum session time of 10 minutes, each thread can handle 6 sessions per hour (since 60 minutes divided by 10 minutes equals 6). This results in a total of 180 sessions in one hour (30 threads multiplied by 6 sessions). If the user sets the CTR to 10%, that means 10% of these 180 sessions—equivalent to 18 sessions—should result in ad clicks. The system will then randomly assign these 18 clicks across the 180 sessions, ensuring that the actual CTR closely matches the specified value. This approach provides a consistent and controlled way to simulate realistic ad interaction behavior based on user-defined CTR values.
2. Then we have Ads Time Setting which user can set the Min and Max Time of stay time in each opened tab beside then main tab.

On very bottom of each tab, there's a button to save the settings. If user click the button, the settings will be saved by generate a json config. For every the config app is opened, app also open the current json file and every changes will be afect the json

Keep in mind that the GUI layout of the Settings must be not too vertical-down and must be also in dark mode. Please make the code for the layout UI in different file (not in main code), in main file code we only call the specific function or file.

That is the details about the settings. Now, let's talk about the flow of the app. So, after user specify the settings of the nexAds automation. The App will be running with the flow like this (let's simulate this for each threads worker, which mean each worker have flow like this):
1. Initialization browser
2. Visited 1st URL
3. Random stay time and Doing random activity
4. Look at next url and find it in current page and click it, if we can't found the same URL as the next URL, choose randomly
5. Random Stay time and Doing random activity
6. Same untill all url list is visited
7. Last, if there's opened tab other than URL that we specify in URL List, we mark it as Ads Tab. Then we'll process the Ads Tabs with random stay time and doing random activity
8. Natural exit, can be doing with close tab one by one, open Google + add delay then close the tab and browser.

That is the general flow the each session. But, if Ads Session is active, which is assigned based on the CTR, there's we need to add new activity in each page, which is will be Ads Interaction in each page, the app will look the all Adsense Ads by the element, and click it using Control + Click or middle click to open it in new tab.

Please see the refference of the code that related to the features that I asked.

Reference to use Playwright and Browserforge (fingerpint generator and injector)
# Import the AsyncNewContext injector
from browserforge.injectors.playwright import AsyncNewContext
from browserforge.fingerprints import FingerprintGenerator
from playwright.async_api import async_playwright
import asyncio

async def main():
    async with async_playwright() as playwright:
        browser = await playwright.chromium.launch(headless=False)
        #playwright.browser.launch must be use correct browser as the option in fingerprint_instance. For example, if browser firefox, then will use firefox.launch.

        # Generate fingerprint with options
        fingerprint_instance = FingerprintGenerator().generate(browser="chrome", os='ios', device="mobile")
        # the browser, os and device is based on the settings that user set.

        context = await AsyncNewContext(browser, fingerprint=fingerprint_instance)
        page = await context.new_page()
        await page.goto("https://www.browserscan.net")

        input("Press Enter to close the browser...")

# Run the async main function
asyncio.run(main())

Reference for organic reffer (simulate real search in Google search)
    def get_random_keyword(self):
        """Get a random keyword from the organic keywords list"""
        if not self.referrer_type_checks['Organic'].isChecked():
            return None
            
        keywords = self.organic_keywords_input.toPlainText().strip().split('\n')
        keywords = [k.strip() for k in keywords if k.strip()]
        
        if not keywords:
            return None
            
        return random.choice(keywords)

    def perform_organic_search(self, page, search_url, keyword, target_domain, target_url, worker_id):
        """
        Perform organic search flow with improved click handling
        """
        try:
            # Navigate to search engine
            self.log_status(f"Worker {worker_id}: Performing organic search - visiting {search_url}")
            page.goto(search_url, timeout=90000, wait_until="networkidle")
            
            # Accept cookies if needed
            if self.auto_accept_cookies.isChecked():
                self.accept_google_cookies(page)
            
            # Perform search
            self.log_status(f"Worker {worker_id}: Searching for keyword: {keyword}")
            
            # Find search input (handles both textarea and input elements)
            search_input = None
            search_selectors = [
                'textarea[name="q"], input[name="q"]',  # Google
                'input[name="p"]',   # Yahoo/Bing
                'input[name="text"]' # Yandex
            ]
            
            for selector in search_selectors:
                try:
                    search_input = page.wait_for_selector(selector, state="visible", timeout=30000)
                    if search_input:
                        break
                except:
                    continue
            
            if not search_input:
                self.log_status(f"Worker {worker_id}: Could not find search input")
                return False
            
            # Type keyword with human-like delays
            search_input.click(click_count=3)  # Select existing text
            search_input.press("Backspace")    # Clear it
            for char in keyword:
                search_input.press(char)
                page.wait_for_timeout(random.randint(50, 150))
            
            # Submit search
            search_input.press("Enter")
            try:
                page.wait_for_load_state("networkidle", timeout=60000)
            except:
                pass
            
            # Look for target domain in results
            self.log_status(f"Worker {worker_id}: Looking for {target_domain} in results")
            
            # Try multiple selectors to find result links
            result_links = []
            link_selectors = [
                f'a[href*="{target_domain}"]:visible',  # Generic visible link
                f'cite:has-text("{target_domain}")',    # Google's citation
                f'a[data-ved][href*="{target_domain}"]' # Google's result link
            ]
            
            for selector in link_selectors:
                try:
                    links = page.query_selector_all(selector)
                    if links:
                        result_links.extend(links)
                except:
                    continue
            
            if not result_links:
                self.log_status(f"Worker {worker_id}: Target domain not found in results")
                return False
            
            # Click the first matching result with multiple fallback methods
            link = result_links[0]
            element_info = self.get_element_info(link)
            
            # Method 1: Standard click with navigation wait
            try:
                with page.expect_navigation(timeout=60000):
                    link.click()
                self.log_status(f"Worker {worker_id}: Clicked result via standard click\nElement: {element_info}")
                return True
            except Exception as e:
                self.log_status(f"Worker {worker_id}: Standard click failed, trying JS click: {str(e)}")
            
            # Method 2: JavaScript click
            try:
                page.evaluate("(link) => link.click()", link)
                page.wait_for_timeout(3000)  # Wait for potential navigation
                if target_domain in page.url:
                    self.log_status(f"Worker {worker_id}: Clicked result via JS\nElement: {element_info}")
                    return True
            except Exception as e:
                self.log_status(f"Worker {worker_id}: JS click failed, trying href navigation: {str(e)}")
            
            # Method 3: Direct navigation to href
            try:
                href = link.get_attribute("href")
                if href:
                    page.goto(href, timeout=90000, wait_until="networkidle")
                    if target_domain in page.url:
                        self.log_status(f"Worker {worker_id}: Navigated directly to result URL\nElement: {element_info}")
                        return True
            except Exception as e:
                self.log_status(f"Worker {worker_id}: All click methods failed: {str(e)}")
                return False
            
            return False
            
        except Exception as e:
            self.log_status(f"Worker {worker_id}: Organic search error: {str(e)}")
            return False

Reference for auto accept Google Cookies
    def accept_google_cookies(self, page):
        """Auto accept Google cookies if the popup is present."""
        try:
            # Try multiple selectors for different Google cookie popups
            accept_selectors = [
                "button:has-text('Accept all'), button:has-text('I agree'), button:has-text('Accept')",
                "button#L2AGLb",  # Google's accept button ID
                "div[role='dialog'] button:has-text('Accept')"
            ]
            
            for selector in accept_selectors:
                try:
                    accept_button = page.query_selector(selector)
                    if accept_button and accept_button.is_visible():
                        accept_button.click(timeout=5000)
                        self.log_status("Accepted Google cookies")
                        return True
                except:
                    continue
            return False
        except Exception as e:
            self.log_status(f"Error accepting cookies: {str(e)}")
            return False

Reference to ensure correct tab:
    def ensure_correct_tab(self, browser_context, target_url, worker_id, timeout=60):
        """
        Ensure the correct tab is focused before performing activities.
        If the correct tab isn't found, opens the URL in current tab if it's the only tab,
        otherwise creates new tab in same context.
        Returns the page object and success status.
        """
        start_time = time.time()
        attempts = 0
        
        # Extract base domain for more flexible matching
        target_domain = self.extract_domain(target_url)

        while time.time() - start_time < timeout:
            attempts += 1
            try:
                # Get all pages in the context (tabs in the same window)
                pages = browser_context.pages
                
                # Try to find the page with our target domain
                target_page = None
                for page in pages:
                    try:
                        if page.is_closed():
                            continue
                            
                        current_url = page.url
                        if target_domain and target_domain in current_url:
                            target_page = page
                            break
                    except:
                        continue
                
                if target_page:
                    # Bring the target page to front
                    target_page.bring_to_front()
                    
                    # Wait for page to stabilize
                    try:
                        target_page.wait_for_load_state(state="networkidle", timeout=5000)
                    except:
                        pass
                    
                    if attempts > 1:  # Only log if we had to retry
                        self.log_status(f"Worker {worker_id}: Successfully focused on tab with URL: {target_page.url}")
                    return target_page, True
                
                # If we get here, we didn't find the correct tab
                if attempts == 1:  # Only log first attempt
                    self.log_status(f"Worker {worker_id}: No tab found with domain: {target_domain}")
                
                # If this is the only tab in the window, reuse it instead of opening new tab
                if len(pages) == 1:
                    current_page = pages[0]
                    try:
                        # Navigate to target URL in current tab
                        current_page.goto(target_url, timeout=90000, wait_until="networkidle")
                        self.log_status(f"Worker {worker_id}: Reused existing tab for URL: {target_url}")
                        
                        # Bring the tab to front
                        current_page.bring_to_front()
                        return current_page, True
                    except Exception as e:
                        self.log_status(f"Worker {worker_id}: Failed to reuse existing tab: {str(e)}")
                        # Fall through to create new tab if reuse fails
                
                # If multiple tabs exist or single tab reuse failed, create new tab
                try:
                    # Open a new TAB in the same context
                    new_page = browser_context.new_page()
                    
                    # Set viewport size to match other tabs
                    if len(browser_context.pages) > 0:
                        first_page = browser_context.pages[0]
                        viewport = first_page.viewport_size
                        new_page.set_viewport_size(viewport)
                    
                    # Navigate to target URL with proper waiting
                    new_page.goto(target_url, timeout=90000, wait_until="networkidle")
                    self.log_status(f"Worker {worker_id}: Created new TAB for URL: {target_url}")
                    
                    # Bring the new tab to front
                    new_page.bring_to_front()
                    return new_page, True
                    
                except Exception as e:
                    self.log_status(f"Worker {worker_id}: Failed to create new tab: {str(e)}")
                    try:
                        if 'new_page' in locals() and new_page and not new_page.is_closed():
                            new_page.close()
                    except:
                        pass
                    
                time.sleep(1)  # Small delay between retries
                
            except Exception as e:
                self.log_status(f"Worker {worker_id}: Error ensuring correct tab: {str(e)}")
                time.sleep(1)
        
        self.log_status(f"Worker {worker_id}: Timeout ensuring correct tab for {target_url}")
        return None, False

Reference for real mouse click:
                    # Try mouse click first with remaining timeout
                    try:
                        box = element.bounding_box()
                        if box:
                            # Move mouse to element with human-like movement
                            watchdog.ping(f"🛍️ Moving to container {container_id}")
                            page.mouse.move(
                                box['x'] + box['width'] / 2,
                                box['y'] + box['height'] / 2,
                                steps=random.randint(5, 15))
                            page.wait_for_timeout(random.randint(300, 800))
                            
                            remaining_time = max(0, timeout - (time.time() - start_time))
                            if remaining_time <= 0:
                                watchdog.ping(f"🛍️ Timeout before clicking {container_id}")
                                self.log_status(f"Worker {worker_id}: Timeout before clicking {container_id}")
                                continue
                                
                            watchdog.ping(f"🛍️ Clicking container {container_id}")
                            with page.expect_popup(timeout=remaining_time * 1000) as popup_info:
                                page.mouse.click(
                                    box['x'] + box['width'] / 2,
                                    box['y'] + box['height'] / 2,
                                    button="left",
                                    click_count=1,
                                    delay=random.randint(50, 200))
                            
                            new_page = popup_info.value
                            if new_page:
                                new_pages.append(new_page)
                                clicked += 1
                                watchdog.ping(f"🛍️ Clicked {container_type} ad: {container_id}")
                                self.log_status(f"Worker {worker_id}: Clicked {container_type} ad via mouse: {container_id}\nElement: {element_info}")
                                continue
                    except Exception as e:
                        watchdog.ping(f"🛍️ Mouse click failed for {container_id}, trying native click: {str(e)}")
                        self.log_status(f"Worker {worker_id}: Mouse click failed for {container_id}, trying native click: {str(e)}\nElement: {element_info}")